USE MASTER
GO

CREATE DATABASE SERVIENTREGA
GO

USE SERVIENTREGA
GO

CREATE TABLE DEPARTAMENTO(
	ID_DEPARTAMENTO INT IDENTITY(1, 1) PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(60) NOT NULL
)
GO

CREATE TABLE CIUDAD(
	ID_CIUDAD INT IDENTITY(1, 1) PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(60) NOT NULL,
	CANTHABITANTES INT NOT NULL CHECK(CANTHABITANTES > 0),--PUSIMOS ESTE CHECK PARA VERIFICAR QUE LA CANTIDAD DE HABITANTES SEA MAYOR A CERO
	ID_DEPARTAMENTO INT NOT NULL,
	FOREIGN KEY (ID_DEPARTAMENTO) REFERENCES DEPARTAMENTO(ID_DEPARTAMENTO)
)
GO

CREATE TABLE  SUCURSAL(
	CODIGO INT IDENTITY(1, 10) PRIMARY KEY,
	NOMBRE VARCHAR(50) NOT NULL,
	DIRECCION VARCHAR(100) NOT NULL,
	ID_CIUDAD INT,
	FOREIGN KEY (ID_CIUDAD) REFERENCES CIUDAD(ID_CIUDAD)
)
GO

CREATE TABLE AREA(
	ID_AREA  INT IDENTITY(100, 10) PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(60) NOT NULL,
	ID_SUCURSAL INT,
	FOREIGN KEY (ID_SUCURSAL) REFERENCES SUCURSAL(CODIGO)
)
GO

CREATE TABLE VEHICULO(
	PLACA VARCHAR(6) CHECK (LEN(PLACA) >= 6) PRIMARY KEY, --ESTE CHECK ES PARA QUE LA CEDULA TENGA MINIMO 6 DIGITOS
	MARCA VARCHAR(30) NOT NULL,
)
GO

CREATE TABLE MOTO(
	PLACA VARCHAR(6) CHECK (LEN(PLACA) >= 6) PRIMARY KEY NOT NULL, --LA PLACA DEBE TENER AL MENOS 6 CARACTERES
	CILINDRAJE INT CHECK(CILINDRAJE > 99) NOT NULL--EL CILINDRAJE DE UNA MOTO APTA PARA TRABAJAR TIENE QUE SER, AL MENOS, DE 100CC
)
GO 

ALTER TABLE MOTO ADD FOREIGN KEY(PLACA) REFERENCES VEHICULO(PLACA)
GO

CREATE TABLE CARRO(
	PLACA VARCHAR(6) PRIMARY KEY NOT NULL,
	CAPACIDDAD INT NOT NULL,
)
GO

ALTER TABLE CARRO ADD FOREIGN KEY(PLACA) REFERENCES VEHICULO(PLACA)
GO

CREATE TABLE MENSAJERO (
  CEDULA  INT CHECK (LEN(CEDULA) >= 6) PRIMARY KEY NOT NULL, --ESTE CHECK ES PARA QUE LA CEDULA TENGA MINIMO 6 DIGITOS
  NOMBRE VARCHAR(60) NOT NULL,
  VEHICULO_PLACA VARCHAR(6) NULL,
  FOREIGN KEY (VEHICULO_PLACA) REFERENCES VEHICULO(PLACA) ON DELETE SET NULL 
)
GO


CREATE TABLE MENSAJERO_AREA(
	ID_MENS_AREA INT IDENTITY(1, 1) NOT NULL,
	CEDULA_MENSAJERO INT NOT NULL,
	ID_AREA INT NOT NULL,
	KILOMETRO INT NOT NULL CHECK(KILOMETRO > 0), --LOS KILOMETROS RECORRIDOS TIENEN QUE SER MAYORES A 0 
	FECHA DATE NOT NULL,
	FOREIGN KEY (CEDULA_MENSAJERO) REFERENCES MENSAJERO(CEDULA),
	FOREIGN KEY (ID_AREA) REFERENCES AREA(ID_AREA)
)
GO

CREATE TABLE CLIENTE(
	CEDULA INT CHECK (LEN(CEDULA) >= 6) PRIMARY KEY NOT NULL, --LAS CEDULAS DEBEN TENER AL MENOS 6 DIGITOS
	NOMBRE VARCHAR(60) NOT NULL,
	DIRECCION VARCHAR(60) NOT NULL,
	TELEFONO VARCHAR(10) NOT NULL
)
GO

CREATE TABLE DESTINATARIO(
	CEDULA INT CHECK (LEN(CEDULA) >= 6) PRIMARY KEY NOT NULL, --ESTE CHECK ES PARA QUE LA CEDULA TENGA MINIMO 6 DIGITOS
	NOMBRE VARCHAR(60),
	DIRECCION VARCHAR(60),
	TELEFONO VARCHAR(10)
)
GO

CREATE TABLE TIPO(
	ID_TIPO INT IDENTITY(1, 1) PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(10) NOT NULL
)
GO

CREATE TABLE PAQUETE(
	ID_PAQUETE INT IDENTITY(1, 2) PRIMARY KEY NOT NULL,
	DIRECCION VARCHAR(60) NOT NULL,
	COST_ENVIO FLOAT NOT NULL,
	ID_TIPO INT NULL,
	ID_PAQ_MENSAJERO INT NOT NULL,
	CEDULA_MENSAJERO INT NULL,
	CEDULA_CLIENTE INT NULL,
	CEDULA_DESTINATARIO INT NULL,
	FOREIGN KEY (ID_TIPO) REFERENCES TIPO(ID_TIPO) ON DELETE SET NULL, 
	FOREIGN KEY (CEDULA_MENSAJERO) REFERENCES MENSAJERO(CEDULA) ON DELETE SET NULL,
	FOREIGN KEY (CEDULA_CLIENTE) REFERENCES CLIENTE(CEDULA) ON DELETE SET NULL,
	FOREIGN KEY (CEDULA_DESTINATARIO) REFERENCES DESTINATARIO(CEDULA) ON DELETE SET NULL
)
GO

INSERT INTO DEPARTAMENTO VALUES ('ANTIOQUIA'), ('VALLE DEL CAUCA'), ('BOGOTA'), ('MAGDALENA'), ('HUILA'), ('NARIÑO')

INSERT INTO CIUDAD VALUES ('MEDELLIN', 2500000, 1), ('CALI', 2300000, 2), ('BOGOTA', 3000000, 3), ('SANTA MARTA', 1800000, 4), ('NEIVA', 1900000, 5), ('PASTO', 2000000, 6)

INSERT INTO SUCURSAL VALUES ('LOS ALMENDROS', 'CR 10 #34-56', 1), 
	('VILLA LINDA', 'AV 5 #23-45', 2), 
	('PLAZA BOLIVAR', 'CL 8 #12-30', 3),
	('LOS REYES', 'CR 20 #65-10', 4),
	('LA VILLA', 'AV 7 #43-21', 5),
	('CANDELARIA', 'AV 7 #43-21', 6)



INSERT INTO AREA VALUES ('NORTE', 1), ('SUR', 1), ('ORIENTE', 1), ('CENTRO', 1),
	('NORTE', 11), ('SURESTE', 11), ('ORIENTE', 11), ('CENTRO', 11),
	('CENTRO', 21), ('NORTE', 21), ('SUR', 21),
	('LA CABAÑA', 31), ('CENTRO', 31),
	('VILLA ALTA', 41), ('CENTRO', 41),
	('CENTRO', 51)


INSERT INTO VEHICULO VALUES ('ABC100', 'MERCEDES'),
	('ASD589', 'INNO'),
	('ASD584', 'JACK'),
	('WER258', 'MERCEDES'),
	('HYU222', 'INNO'),
	('JUI269', 'JACK'),
	('ASD29A', 'YAMAHA'),
	('QWE23B', 'YAMAHA'),
	('WSE23E', 'AKT'),
	('QER58F', 'HONDA'),
	('BGH69F', 'SUZUKI'),
	('ERT03C', 'HONDA')

INSERT INTO CARRO VALUES ('ABC100', 20),
	('ASD589', 20),
	('ASD584', 40),
	('WER258', 18),
	('HYU222', 40),
	('JUI269', 30)

INSERT INTO MOTO VALUES ('ASD29A', 125),
	('QWE23B', 150),
	('WSE23E', 125),
	('QER58F', 100),
	('BGH69F', 150),
	('ERT03C', 115)

INSERT INTO MENSAJERO VALUES (123456, 'Juan Perez', 'ABC100'),
	(2345673, 'Maria Gomez', 'ASD584'),
	(345678, 'Carlos Rodriguez', 'WER258'),
	(456789, 'Laura Hernandez', 'JUI269'),
	(567890, 'Pedro Ramirez', 'HYU222'),
	(678901, 'Ana Torres', 'QWE23B'),
	(789012, 'Luisa Chavez', 'WSE23E'),
	(890123, 'Sergio Lopez', 'QER58F'),
	(901234, 'Valentina Gomez', 'BGH69F'),
	(312345, 'Julio Torres', 'ERT03C'),
	(123450, 'Carolina Perez', 'ASD29A')

INSERT INTO MENSAJERO_AREA VALUES (123456, 100, 10, '2022-05-01'), 
	(123456, 110, 20, '2022-05-01'), 
	(123456, 110, 12, '2022-06-01'),
	(123456, 100, 7, '2022-06-01'),
	(123450, 140, 20, '2022-05-01'),
	(123450, 150, 12, '2022-05-20'),
	(123450, 160, 6, '2022-06-01'),
	(123450, 140, 20, '2022-05-02'),
	(312345, 180, 12, '2022-05-02'),
	(312345, 170, 12, '2022-06-01'),
	(312345, 180, 5, '2022-06-02'),
	(345678, 200, 12, '2022-05-01'),
	(345678, 210, 15, '2022-05-12'),
	(345678, 200, 12, '2022-06-01'),
	(345678, 210, 12, '2022-06-04'),
	(456789, 230, 7, '2022-05-01'),
	(456789, 240, 7, '2022-05-20'),
	(456789, 240, 10, '2022-06-01'),
	(456789, 230, 5, '2022-06-2'),
	(567890, 250, 7, '2022-05-01'),
	(567890, 250, 8, '2022-05-02'),
	(567890, 250, 5, '2022-06-02'),
	(567890, 250, 10, '2022-06-07'),
	(678901, 120, 10, '2022-05-07'),
	(678901, 130, 10, '2022-06-02'),
	(678901, 120, 8, '2022-06-09'),
	(789012, 140, 8, '2022-06-09'),
	(890123, 200, 8, '2022-06-10'),
	(901234, 250, 9, '2022-06-01'),
	(2345673, 250, 9, '2022-05-30')


INSERT INTO TIPO VALUES ('BOLSA'), ('SOBRE'), ('CAJA')

INSERT INTO DESTINATARIO VALUES (205689, 'ANDREA VELEZ', 'CR 80 # 30 60', '3128462658'), 
	(5987403, 'JOSE PEREZ', 'CR 20 # 23 60', '3135286398'),
	(90375603, 'MARIA RODRIGUEZ', 'CL 40 # 69 12', '3405892020'),
	(589325, 'JUAN PEREZ', 'CL 40 # 30 41', '3008956363'),
	(5631287, 'ESTEFANIA VELEZ', 'CL 20 # 98 98', '3013013030'),
	(203056, 'JUAN PEREZ', 'CL 40 # 30 41', '3008956363'),
	(20305687, 'RAMIRO RAMIREZ', 'AV 20 # 30 30', '3018956363'),
	(30789580, 'JASINTO PEREZ', 'CL 40 # 12 31', '3008156363'),
	(1135689, 'JOVANI PEREZ', 'CL 89 # 30 41', '3008956363'),
	(2030568, 'JUAN VELEZ', 'AV 40 # 20 41', '3008954363'),
	(223659, 'JUAN RAMIREZ', 'CL 131 # 30 41', '3002956363')

INSERT INTO CLIENTE VALUES (654859, 'ANDREA RAMIREZ', 'CR 12 # 30 60', '3128662658'), 
	(35795100, 'ANDRES PEREZ', 'CR 20 # 23 60', '3135286398'),
	(10375603, 'MARIO RODRIGUEZ', 'CL 40 # 69 12', '3406812020'),
	(2583677, 'XIMENA PEREZ', 'CL 40 # 30 51', '3018956363'),
	(332589, 'ESTEBAN VELEZ', 'CL 20 # 98 98', '3013313060'),
	(2223334, 'JUAN PEREZ', 'CL 40 # 12 41', '3018956363'),
	(1112358, 'REBECA RAMIREZ', 'CR 20 # 30 30', '3012346363'),
	(11223658, 'JASINTA PEREZ', 'CL 22 # 12 31', '3008756363'),
	(3366998, 'MARIANA PEREZ', 'CL 36 # 30 41', '3008956363'),
	(8899753, 'JUAN RAMIREZ', 'CR 40 # 20 41', '3008454363'),
	(1115556, 'ESTEFANIA RAMIREZ', 'CL 131 # 30 41', '3002956363')

INSERT INTO PAQUETE VALUES ('CR 80 # 30 60', 20000, 1, 1, 123456, 654859, 205689),
	('CR 20 # 23 60', 40000, 2, 1, 123450, 35795100, 5987403),
	('CL 40 # 69 12', 30000, 3, 1, 312345, 10375603, 90375603),
	('CL 40 # 30 41', 10000, 1, 1, 345678, 2583677, 589325),
	('CL 20 # 98 98', 13000, 2, 1, 456789, 332589, 5631287),
	('CL 40 # 30 41', 20000, 3, 1, 567890, 2223334, 203056),
	('AV 20 # 30 30', 12000, 1, 1, 678901, 1112358, 20305687),
	('CL 40 # 12 31', 30000, 2, 1, 789012, 11223658, 30789580),
	('CL 89 # 30 41', 50000, 3, 1, 890123, 3366998, 1135689),
	('AV 40 # 20 41', 10000, 1, 1, 901234, 8899753, 2030568),
	('CL 131 # 30 41', 30000, 2, 1, 2345673, 1115556, 223659)

--CRUD DE DEPARTAMENTO

--CREAR
CREATE PROCEDURE AGREGAR_DEPARTAMENTO @NOMBRE VARCHAR(60) AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM DEPARTAMENTO WHERE NOMBRE = @NOMBRE) --VERIFICAR QUE EL DEPARTAMENTO NO EXISTA
	BEGIN
		INSERT INTO DEPARTAMENTO VALUES (@NOMBRE)
		PRINT 'DEPARTAMENTO AGREGADO CORRECTAMENTE'
		COMMIT TRANSACTION
	END
	ELSE
	BEGIN
		PRINT 'EL DEPARTAMENTO INGRESADO YA EXISTE' --SI YA EXISTE SE MUESTRA EL SIGUIENTE MENSAJE
		ROLLBACK TRANSACTION
	END
END TRY
BEGIN CATCH	
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
GO

--LEER
CREATE PROCEDURE LEER_DEPARTAMENTO @ID INT AS
BEGIN TRY
IF EXISTS (SELECT * FROM DEPARTAMENTO WHERE ID_DEPARTAMENTO = @ID) --VERIFICAR SI EXISTE EL ID INGRESADO Y SI EXISTE VA A MOSTRAR EL DATO ESPECIFICO
	SELECT * FROM DEPARTAMENTO WHERE ID_DEPARTAMENTO = @ID
ELSE
	SELECT * FROM DEPARTAMENTO --SI NO EXISTE EL ID SE MOSTRARÁN TODOS LOS DATOS DE LA TABLA
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--ACTUALIZAR
CREATE PROCEDURE ACTUALIZAR_DEPARTAMENTO @ID INT, @NOMBRE VARCHAR(60) AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS (SELECT * FROM DEPARTAMENTO WHERE ID_DEPARTAMENTO = @ID) --SI NO EXISTE EL ID VA A MOSTRAR EL SIGUIENTE MENSAJE
	BEGIN
		PRINT 'NO EXISTE UN DEPARTAMENTO CON EL ID INGRESADO'
		ROLLBACK TRANSACTION
	END
	ELSE
		BEGIN
			UPDATE DEPARTAMENTO SET NOMBRE = @NOMBRE WHERE ID_DEPARTAMENTO = @ID -- SI EXISTE SE VA A HACER LA ACTUALIZAVION
			PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--BORRAR
CREATE PROCEDURE BORRAR_DEPARTAMENTO @ID INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM DEPARTAMENTO WHERE ID_DEPARTAMENTO = @ID) --SI NO EXISTE VA A MOSTRAR EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'EL DEPARTAMENTO NO EXISTE'
			ROLLBACK TRANSACTION
		END		
	ELSE
		IF EXISTS (SELECT * FROM DEPARTAMENTO D INNER JOIN CIUDAD C ON D.ID_DEPARTAMENTO = C.ID_DEPARTAMENTO WHERE D.ID_DEPARTAMENTO = @ID) --SI EXISTE SE VA A HACER EL BORRADO DE DEPARTAMENTO Y DE TODOS LOS DATOS RELACIONADOS CON ÉL
		BEGIN
			DELETE FROM MENSAJERO_AREA WHERE ID_AREA IN (SELECT ID_AREA FROM AREA WHERE ID_SUCURSAL IN (SELECT CODIGO FROM SUCURSAL WHERE ID_CIUDAD IN (SELECT ID_CIUDAD FROM CIUDAD WHERE ID_DEPARTAMENTO = @ID)))
			DELETE FROM AREA WHERE ID_SUCURSAL IN (SELECT CODIGO FROM SUCURSAL WHERE ID_CIUDAD IN (SELECT ID_CIUDAD FROM CIUDAD WHERE ID_DEPARTAMENTO = @ID))
			DELETE FROM SUCURSAL WHERE ID_CIUDAD IN (SELECT ID_CIUDAD FROM CIUDAD WHERE ID_DEPARTAMENTO = @ID)
			DELETE FROM CIUDAD WHERE ID_DEPARTAMENTO = @ID
			DELETE FROM DEPARTAMENTO WHERE ID_DEPARTAMENTO = @ID
			COMMIT TRANSACTION
		END
		ELSE
			BEGIN
				DELETE FROM DEPARTAMENTO WHERE ID_DEPARTAMENTO = @ID --SI NO EXISTEN DATOS RELACIONADOS CON EL DEPARTAMENTO VA A HACER EL BORRADO UNICO EL DATO
				COMMIT TRANSACTION
			END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--CRUD DE LA TABLA CIUDAD

--CREAR UNA CIUDAD

CREATE PROCEDURE AGREGAR_CIUDAD @NOMBRE VARCHAR(60), @CANTIDAD INT, @ID_DEP INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM DEPARTAMENTO WHERE ID_DEPARTAMENTO = @ID_DEP) --SI EXISTE EL DEPARTAMENTO VA A MOSTRAR EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'NO EXISTE UN DEPARTAMENTO CON EL ID QUE INGRESO, VERIFIQUE E INTENTE NUEVAMENTE'
			ROLLBACK TRANSACTION
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM CIUDAD WHERE NOMBRE = @NOMBRE) --SI NO EXISTE LA CIUDAD VA A HACER LA INSERCION DE LOS DATOS
			BEGIN
				INSERT INTO CIUDAD VALUES (@NOMBRE, @CANTIDAD, @ID_DEP)
				PRINT 'CIUDAD AGREGADA CORRECTAMENTE'
				COMMIT TRANSACTION
			END
		ELSE
			BEGIN
				PRINT 'LA CIUDAD INGRESADA YA EXISTE' -- SI YA EXISTE LA CIUDAD ENTONCES MUESTRA EL SIGUIENTE MENSAJE
				ROLLBACK TRANSACTION
			END
END TRY
BEGIN CATCH	
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
GO

--LEER
CREATE PROCEDURE LEER_CIUDAD @ID INT AS
BEGIN TRY
IF EXISTS (SELECT * FROM CIUDAD WHERE ID_CIUDAD = @ID) --VERIFICAR SI EXISTE EL ID INGRESADO Y SI EXISTE VA A MOSTRAR EL DATO ESPECIFICO
	SELECT * FROM CIUDAD WHERE ID_CIUDAD = @ID
ELSE
	SELECT * FROM CIUDAD --SI NO EXISTE EL ID SE MOSTRARÁN TODOS LOS DATOS DE LA TABLA
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--ACTUALIZAR

CREATE PROCEDURE ACTUALIZAR_CIUDAD @ID INT, @NOMBRE VARCHAR(60), @CANTIDAD INT, @ID_DEP INT AS --EN EL SIGUIENTE PROCEDIMIENTO SE ANALIZA SI LOS DATOS INGRESADOS POR EL USUARIO ESTÁN VACIOS
BEGIN TRANSACTION                                                                              --SI INGRESA UN DATOS INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRY
	IF NOT EXISTS (SELECT * FROM CIUDAD WHERE ID_CIUDAD = @ID) --VERIFICAR SI EXISTE LA CIUDAD
		BEGIN
			PRINT 'NO EXISTE UNA CIUDAD CON EL ID INGRESADO'
			ROLLBACK TRANSACTION
		END
	ELSE
		IF NOT EXISTS (SELECT * FROM DEPARTAMENTO WHERE ID_DEPARTAMENTO = @ID_DEP) --VERIFICAR SI EXISTE EL DEPARTAMENTO QUE ES LA CLAVE FORANEA DE ESTA TABLA
			BEGIN
				PRINT 'NO EXISTE UN DEPARTAMENTO CON EL ID INGRESADO'
			END
		ELSE
			IF @NOMBRE != ''
				BEGIN
					UPDATE CIUDAD SET NOMBRE = @NOMBRE WHERE ID_CIUDAD = @ID
					PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
					COMMIT TRANSACTION
				END
			ELSE
				IF @CANTIDAD != 0
					BEGIN
						UPDATE CIUDAD SET CANTHABITANTES = @CANTIDAD WHERE ID_CIUDAD = @ID
						PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
						COMMIT TRANSACTION
					END
				ELSE
					IF @ID_DEP != 0
						BEGIN
							UPDATE CIUDAD SET ID_DEPARTAMENTO = @ID_DEP WHERE ID_CIUDAD = @ID
							PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
							COMMIT TRANSACTION
						END
					ELSE
						IF @ID_DEP = 0 AND @NOMBRE = '' AND @CANTIDAD = 0
							BEGIN
								PRINT 'DEBE INGRESAR UN NOMBRE, UN ID DE DEPARTAMENTO O UNA CANTIDAD DE HABITANTES PARA ACTUALIZAR'
								ROLLBACK TRANSACTION
							END
						ELSE
							BEGIN
								UPDATE CIUDAD SET NOMBRE = @NOMBRE, CANTHABITANTES = @CANTIDAD, ID_DEPARTAMENTO = @ID_DEP WHERE ID_CIUDAD = @ID
								PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
								COMMIT TRANSACTION
							END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO


--BORRAR
CREATE PROCEDURE BORRAR_CIUDAD @ID INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM CIUDAD WHERE ID_CIUDAD = @ID) --SI NO EXISTE LA CIUDAD MUESTRA EL MENSAJE
		BEGIN
			PRINT 'LA CIUDAD NO EXISTE'
			ROLLBACK TRANSACTION
		END		
	ELSE
		IF EXISTS (SELECT * FROM CIUDAD C INNER JOIN SUCURSAL S ON S.ID_CIUDAD = C.ID_CIUDAD WHERE C.ID_CIUDAD = @ID)--SI EL DATO ES CLAVE FORANEA DE OTRAS TABLAS ENTONCES HARÁ EL BORRADO DE TODOS LOS DATOS RELACIONADOS
			BEGIN
				DELETE FROM MENSAJERO_AREA WHERE ID_AREA IN (SELECT ID_AREA FROM AREA WHERE ID_SUCURSAL IN (SELECT CODIGO FROM SUCURSAL WHERE ID_CIUDAD = @ID))
				DELETE FROM AREA WHERE ID_SUCURSAL IN (SELECT CODIGO FROM SUCURSAL WHERE ID_CIUDAD = @ID)
				DELETE FROM SUCURSAL WHERE ID_CIUDAD = @ID
				DELETE FROM CIUDAD WHERE ID_CIUDAD = @ID
				PRINT 'DATOS BORRADOS EXITOSAMENTE'
				COMMIT TRANSACTION
			END
		ELSE
			BEGIN --SI NO TIENE NINGUN DATO RELACIONADO ENTONCES HACE EL BORRADO DE LA CIUADAD UNICA
				DELETE FROM CIUDAD WHERE ID_CIUDAD = @ID
				PRINT 'DATOS BORRADOS EXITOSAMENTE'
				COMMIT TRANSACTION
			END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--CRUD DE SUCURSAL

--INSERTAR
CREATE PROCEDURE AGREGAR_SUCURSAL @NOMBRE VARCHAR(60), @DIRECCION VARCHAR(50), @ID_CIU INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM CIUDAD WHERE ID_CIUDAD = @ID_CIU) --VERIFICAR SI EXISTE LA CIUDAD, SI NO EXISTE MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'NO EXISTE UNA CIUDAD CON EL ID QUE INGRESO, VERIFIQUE E INTENTE NUEVAMENTE'
			ROLLBACK TRANSACTION
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM SUCURSAL WHERE NOMBRE = @NOMBRE AND ID_CIUDAD = @ID_CIU) --SI NO EXISTE LA SUCURSAL ENTONCES HARÁ LA INSERCION DE LOS DATOS
			BEGIN
				INSERT INTO SUCURSAL VALUES (@NOMBRE, @DIRECCION, @ID_CIU)
				PRINT 'SUCURSAL AGREGADA CORRECTAMENTE'
				COMMIT TRANSACTION
			END
		ELSE
			BEGIN --SI YA EXISTE LA SUCURSAL ENTONCES MUESTRA EL SIGUIENTE MENSAJE
				PRINT 'LA SUCURSAL INGRESADA YA EXISTE'
				ROLLBACK TRANSACTION
			END
END TRY
BEGIN CATCH	
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
GO

--LEER
CREATE PROCEDURE LEER_SUCURSAL @ID INT AS
BEGIN TRY
IF EXISTS (SELECT * FROM SUCURSAL WHERE CODIGO = @ID) --VERIFICAR SI EXISTE EL ID INGRESADO Y SI EXISTE VA A MOSTRAR EL DATO ESPECIFICO
	SELECT * FROM SUCURSAL WHERE CODIGO = @ID
ELSE
	SELECT * FROM SUCURSAL --SI NO EXISTE EL ID SE MOSTRARÁN TODOS LOS DATOS DE LA TABLA
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--ACTUALIZAR
CREATE PROCEDURE ACTUALIZAR_SUCURSAL @ID INT, @NOMBRE VARCHAR(60), @DIRECCION VARCHAR(100), @ID_CIU INT AS  --EN EL SIGUIENTE PROCEDIMIENTO SE ANALIZA SI LOS DATOS INGRESADOS POR EL USUARIO ESTÁN VACIOS
BEGIN TRANSACTION                                                                                           --SI INGRESA UN DATOS INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRY
	IF NOT EXISTS (SELECT * FROM SUCURSAL WHERE CODIGO = @ID) --VERIFICAR SI EXISTE YA LA SUCURSAL
		BEGIN
			PRINT 'NO EXISTE UNA SUCURSAL CON EL ID INGRESADO'
			ROLLBACK TRANSACTION
		END
	ELSE
		IF NOT EXISTS (SELECT * FROM CIUDAD WHERE ID_CIUDAD = @ID_CIU) --VERIFICAR SI EXISTE LA CIUDAD
			BEGIN
				PRINT 'NO EXISTE UNA CIUDAD CON EL ID INGRESADO'
				ROLLBACK TRANSACTION
			END
		ELSE
			IF @NOMBRE != ''
				BEGIN
					UPDATE SUCURSAL SET NOMBRE = @NOMBRE WHERE CODIGO = @ID
					PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
					COMMIT TRANSACTION
				END
			ELSE
				IF @DIRECCION != ''
					BEGIN
						UPDATE SUCURSAL SET DIRECCION = @DIRECCION WHERE CODIGO = @ID
						PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
						COMMIT TRANSACTION
					END
				ELSE
					IF @ID_CIU != 0
						BEGIN
							UPDATE SUCURSAL SET ID_CIUDAD = @ID_CIU WHERE CODIGO = @ID
							PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
							COMMIT TRANSACTION
						END
					ELSE
						IF @DIRECCION = '' AND @NOMBRE = '' AND @ID_CIU = 0
							BEGIN
								PRINT 'DEBE INGRESAR UN NOMBRE, UN ID DE DEPARTAMENTO O UNA CANTIDAD DE HABITANTES PARA ACTUALIZAR'
								ROLLBACK TRANSACTION
							END
						ELSE
							BEGIN
								UPDATE SUCURSAL SET NOMBRE = @NOMBRE, DIRECCION = @DIRECCION, ID_CIUDAD = @ID_CIU WHERE CODIGO = @ID
								PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
								COMMIT TRANSACTION
							END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--BORRAR
CREATE PROCEDURE BORRAR_SUCURSAL @ID INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM SUCURSAL WHERE CODIGO = @ID) --SI NO EXISTE LA SUCURSAL MOSTRARÁ EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'LA SUCURSAL NO EXISTE'
			ROLLBACK TRANSACTION
		END		
	ELSE
		IF EXISTS (SELECT * FROM SUCURSAL S INNER JOIN AREA A ON S.CODIGO = A.ID_SUCURSAL WHERE S.CODIGO = @ID) --SI EXISTE EL DATO Y TIENE DATOS RELACIONADOS ENTONCES HARA EL BORRADO DE TODOS LOS DATOS RELACIONADOS
			BEGIN
				DELETE FROM MENSAJERO_AREA WHERE ID_AREA IN (SELECT ID_AREA FROM AREA WHERE ID_SUCURSAL = @ID)
				DELETE FROM AREA WHERE ID_SUCURSAL = @ID
				DELETE FROM SUCURSAL WHERE CODIGO = @ID
				PRINT 'DATOS BORRADOS EXITOSAMENTE'
				COMMIT TRANSACTION
			END
		ELSE
			BEGIN --SI NO TIENE DATOS RELACIONADOS ENTONCES HARÁ EL BORRADO DEL DATO INDIVIDUAL
				DELETE FROM SUCURSAL WHERE CODIGO = @ID
				PRINT 'DATOS BORRADOS EXITOSAMENTE'
				COMMIT TRANSACTION
			END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--CRUD DE AREA

--CREAR
CREATE PROCEDURE AGREGAR_AREA @NOMBRE VARCHAR(60), @ID_SUCU INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM SUCURSAL WHERE CODIGO = @ID_SUCU) --VERIDFICAR SI EXISTE UNA SUCURSAL
		BEGIN
			PRINT 'NO EXISTE UNA SUCURSAL CON EL ID QUE INGRESO, VERIFIQUE E INTENTE NUEVAMENTE'
			ROLLBACK TRANSACTION
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM AREA WHERE NOMBRE = @NOMBRE AND ID_SUCURSAL = @ID_SUCU)--SI NO EXISTE EL AREA ENTONCES ENTONCES HACE LA INSERCION
			BEGIN
				INSERT INTO AREA VALUES (@NOMBRE, @ID_SUCU)
				PRINT 'SUCURSAL AGREGADA CORRECTAMENTE'
				COMMIT TRANSACTION
			END
		ELSE
			BEGIN
				PRINT 'LA SUCURSAL INGRESADA YA EXISTE'
				ROLLBACK TRANSACTION
			END
END TRY
BEGIN CATCH	
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
GO

--LEER
CREATE PROCEDURE LEER_AREA @ID INT AS
BEGIN TRY
IF EXISTS (SELECT * FROM AREA WHERE ID_AREA = @ID)--VERIFICAR SI EXISTE EL ID INGRESADO Y SI EXISTE VA A MOSTRAR EL DATO ESPECIFICO
	SELECT * FROM AREA WHERE ID_AREA = @ID
ELSE
	SELECT * FROM AREA--SI NO EXISTE EL ID SE MOSTRARÁN TODOS LOS DATOS DE LA TABLA
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--ACTUALIZAR

CREATE PROCEDURE ACTUALIZAR_AREA @ID INT, @NOMBRE VARCHAR(60), @ID_SUCU INT AS --EN EL SIGUIENTE PROCEDIMIENTO SE ANALIZA SI LOS DATOS INGRESADOS POR EL USUARIO ESTÁN VACIOS
BEGIN TRANSACTION                                                              --SI INGRESA UN DATO INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRY
	IF NOT EXISTS (SELECT * FROM AREA WHERE ID_AREA = @ID) AND @ID_SUCU >= 0
		BEGIN
			PRINT 'NO EXISTE UNA AREA CON EL ID INGRESADO'
			ROLLBACK TRANSACTION
		END
		ELSE
			IF @NOMBRE = '' AND @ID_SUCU = 0
			BEGIN
				PRINT 'DEBE INGRESAR UN NOMBRE, UN ID DE SUCURSAL PARA ACTUALIZAR'
				ROLLBACK TRANSACTION
			END
			ELSE
				IF NOT EXISTS (SELECT * FROM SUCURSAL WHERE CODIGO = @ID_SUCU) AND @ID_SUCU > 0
					BEGIN
						PRINT 'NO EXISTE UNA SUCURSAL CON EL ID INGRESADO'
						ROLLBACK TRANSACTION
					END
				ELSE
					IF @NOMBRE != '' AND @ID_SUCU = 0
						BEGIN
							UPDATE AREA SET NOMBRE = @NOMBRE WHERE ID_AREA = @ID
							PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
							COMMIT TRANSACTION
						END			
					ELSE
						IF @ID_SUCU != 0
							BEGIN
								UPDATE AREA SET ID_SUCURSAL = @ID_SUCU WHERE ID_AREA = @ID
								PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
								COMMIT TRANSACTION
							END						
						ELSE
							BEGIN
								UPDATE AREA SET NOMBRE = @NOMBRE, ID_SUCURSAL = @ID_SUCU WHERE ID_AREA = @ID
								PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
								COMMIT TRANSACTION
							END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--BORRAR
CREATE PROCEDURE BORRAR_AREA @ID INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM AREA WHERE ID_AREA = @ID)--VERIFICAR SI NO EXISTE EL AREA EN CASO TAL MUESTRA ESTE MENSAJE
		BEGIN
			PRINT 'EL AREA NO EXISTE'
			ROLLBACK TRANSACTION
		END		
	ELSE
		IF EXISTS (SELECT * FROM AREA A INNER JOIN MENSAJERO_AREA M ON A.ID_AREA = M.ID_AREA WHERE A.ID_AREA = @ID)--SI EXISTEN DATOS RELACIONADOS CON EL AREA ENTONCES HACE EL BORRADO DEL AREA Y DE LOS DATOS QUE SE RELACIONAN CON ÉL
			BEGIN
				DELETE FROM MENSAJERO_AREA WHERE ID_AREA = @ID
				DELETE FROM AREA WHERE ID_AREA = @ID
				PRINT 'DATOS BORRADOS EXITOSAMENTE'
				COMMIT TRANSACTION
			END
		ELSE
			BEGIN --SI NO EXISTEN RELACIONES CON ESTE DATO, ENTONCES HACE EL BORRADO DEL DATO UNICO
				DELETE FROM AREA WHERE ID_AREA = @ID
				PRINT 'DATOS BORRADOS EXITOSAMENTE'
				COMMIT TRANSACTION
			END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--CRUD VEHICULO

--CREAR
CREATE PROCEDURE AGREGAR_VEHICULO @PLACA VARCHAR(6), @MARCA VARCHAR(30) AS
BEGIN TRANSACTION
BEGIN TRY
	IF EXISTS(SELECT * FROM VEHICULO WHERE PLACA = @PLACA) --SI YA EXISTE EL VEHICULO ENTONCES SE MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'YA EXISTE UN VEHICULO CON ESA PLACA'
			ROLLBACK TRANSACTION
		END
	ELSE
		BEGIN
			INSERT INTO VEHICULO VALUES (@PLACA, @MARCA) --SI NO EXISTE EL VEHICULO ENTONCES HACE LA INSERCION
			PRINT 'VEHICULO AGREGADO CORRECTAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH	
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
GO


--LEER
CREATE PROCEDURE LEER_VEHICULO @ID VARCHAR(6) AS
BEGIN TRY
IF EXISTS (SELECT * FROM VEHICULO WHERE PLACA = @ID) --VERIFICAR SI EXISTE EL ID INGRESADO Y SI EXISTE VA A MOSTRAR EL DATO ESPECIFICO
	SELECT * FROM VEHICULO WHERE PLACA = @ID
ELSE
	SELECT * FROM VEHICULO --SI NO EXISTE EL ID SE MOSTRARÁN TODOS LOS DATOS DE LA TABLA
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--ACTUALIZAR

CREATE PROCEDURE ACTUALIZAR_VEHICULO @ID VARCHAR(6), @MARCA VARCHAR(30), @PLACA_ACT VARCHAR(6) AS --EN EL SIGUIENTE PROCEDIMIENTO SE ANALIZA SI LOS DATOS INGRESADOS POR EL USUARIO ESTÁN VACIOS
BEGIN TRANSACTION                                                                                 --SI INGRESA UN DATOS INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRY
	IF @ID = '' AND @MARCA = ''
	BEGIN
		PRINT 'DEBE INGRESAR UNA PLACA ACTUAL VALIDA Y UNA PLACA O MARCA PARA ACTUALIZAR'
		ROLLBACK TRANSACTION
	END
	ELSE
		IF @ID != '' AND @MARCA = '' AND @PLACA_ACT = ''
		BEGIN
			PRINT 'DEBE INGRESAR UNA PLACA O UNA MARCA PARA ACTUALIZAR'
			ROLLBACK TRANSACTION
		END
		ELSE
		IF NOT EXISTS (SELECT * FROM VEHICULO WHERE PLACA = @ID)
			BEGIN
				PRINT 'NO EXISTE UN VEHICULO CON ES PLACA'
				ROLLBACK TRANSACTION
			END
		ELSE
			IF @PLACA_ACT != '' AND EXISTS (SELECT * FROM VEHICULO WHERE PLACA = @ID) AND @MARCA = ''
				BEGIN
					UPDATE VEHICULO SET PLACA = @PLACA_ACT WHERE PLACA = @ID
					PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
					COMMIT TRANSACTION
				END			
			ELSE
				IF @MARCA != '' AND @PLACA_ACT = ''
					BEGIN
						UPDATE VEHICULO SET MARCA = @MARCA WHERE PLACA = @ID
						PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
						COMMIT TRANSACTION
					END						
				ELSE
					BEGIN
						UPDATE VEHICULO SET PLACA = @PLACA_ACT, MARCA = @MARCA WHERE PLACA = @ID
						PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
						COMMIT TRANSACTION
					END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--BORRAR
CREATE PROCEDURE BORRAR_VEHICULO @ID VARCHAR(6) AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM VEHICULO WHERE PLACA = @ID) --VERIFICAR SI NO EXISTE EL VEHICULO, EN CASO TAL, SE MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'LA PLACA NO EXISTE'
			ROLLBACK TRANSACTION
		END		
	ELSE
		IF EXISTS (SELECT * FROM VEHICULO V LEFT JOIN CARRO C ON C.PLACA = V.PLACA LEFT JOIN MOTO M ON M.PLACA = V.PLACA WHERE V.PLACA = @ID)
			BEGIN
				IF EXISTS (SELECT * FROM VEHICULO V INNER JOIN CARRO C ON C.PLACA = V.PLACA WHERE V.PLACA = @ID) --SI EXISTEN CARROS RELACIONADOS CON ESTE VEHICULO, ENTONCES HACE EL BORRADO DE VEHICULO Y DE CARRO
					BEGIN
						DELETE FROM CARRO WHERE PLACA = @ID
						DELETE FROM VEHICULO WHERE PLACA = @ID
						PRINT 'DATOS BORRADOS EXITOSAMENTE'
						COMMIT TRANSACTION
					END
				ELSE
					BEGIN --SI EXISTEN MOTOS RELACIONADOS CON ESTE VEHICULO, ENTONCES HACE EL BORRADO DE VEHICULO Y DE MOTO
						DELETE FROM MOTO WHERE PLACA = @ID
						DELETE FROM VEHICULO WHERE PLACA = @ID
						PRINT 'DATOS BORRADOS EXITOSAMENTE'
						COMMIT TRANSACTION
					END
			END
		ELSE
			BEGIN --SI NO EXISTEN DATOS RELACIONADOS ENTONCES HACE EL BORRADO DEL DATO UNICO
				DELETE FROM VEHICULO WHERE PLACA = @ID
				PRINT 'DATOS BORRADOS EXITOSAMENTE'
				COMMIT TRANSACTION
			END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--CRUD DE CARRO

--CREAR
CREATE PROCEDURE AGREGAR_CARRO @PLACA VARCHAR(6), @CAPACIDAD INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF EXISTS(SELECT * FROM CARRO WHERE PLACA = @PLACA) --SI YA EXISTE EL VEHICULO 
		BEGIN
			PRINT 'YA EXISTE UN VEHICULO CON ESA PLACA EN ESTE REGISTRO DE CARRO'
			ROLLBACK TRANSACTION
		END
	ELSE
	IF NOT EXISTS(SELECT * FROM VEHICULO WHERE PLACA = @PLACA) --SI NO EXISTE EL VEHICULO ENTONCES MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			ROLLBACK TRANSACTION
			PRINT 'NO EXISTE UN VEHICULO CON ESTA PLACA'			
		END
	ELSE
		BEGIN --SI NO EXISTE ENTONCES HACE LA INSERCION
			INSERT INTO CARRO VALUES (@PLACA, @CAPACIDAD)
			PRINT 'VEHICULO AGREGADO CORRECTAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH	
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
GO

--LEER
CREATE PROCEDURE LEER_CARRO @ID VARCHAR(6) AS
BEGIN TRY
IF EXISTS (SELECT * FROM CARRO WHERE PLACA = @ID)--VERIFICAR SI EXISTE EL ID INGRESADO Y SI EXISTE VA A MOSTRAR EL DATO ESPECIFICO
	SELECT * FROM CARRO WHERE PLACA = @ID
ELSE
	SELECT * FROM CARRO --SI NO EXISTE EL ID SE MOSTRARÁN TODOS LOS DATOS DE LA TABLA
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

-- ACTUALIZAR
CREATE PROCEDURE ACTUALIZAR_CARRO @ID VARCHAR(6), @CAPACIDAD INT AS --EN EL SIGUIENTE PROCEDIMIENTO SE ANALIZA SI LOS DATOS INGRESADOS POR EL USUARIO ESTÁN VACIOS
BEGIN TRANSACTION                                                   --SI INGRESA UN DATOS INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRY
	IF @ID = '' AND @CAPACIDAD = 0
	BEGIN
		PRINT 'DEBE INGRESAR UNA PLACA ACTUAL VALIDA Y UNA PLACA O MARCA PARA ACTUALIZAR'
		ROLLBACK TRANSACTION
	END	
	ELSE
	IF NOT EXISTS (SELECT * FROM CARRO WHERE PLACA = @ID)--VERIFICA SI NO EXISTE EL DATOS, EN CASO TAL MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'NO EXISTE UN VEHICULO CON ES PLACA'
			ROLLBACK TRANSACTION
		END
	ELSE
		BEGIN --AQUI SE HACE LA ACTUALIZACION
			UPDATE CARRO SET CAPACIDDAD = @CAPACIDAD WHERE PLACA = @ID
			PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
			COMMIT TRANSACTION
		END	
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--BORRAR

CREATE PROCEDURE BORRAR_CARRO @ID VARCHAR(6) AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM CARRO WHERE PLACA = @ID) --SI NO EXISTE EL CARRO ENTONCES MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'LA PLACA NO EXISTE'
			ROLLBACK TRANSACTION
		END		
	ELSE
		BEGIN
			DELETE FROM CARRO WHERE PLACA = @ID
			DELETE FROM VEHICULO WHERE PLACA = @ID
			PRINT 'DATOS BORRADOS EXITOSAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--CRUD DE MOTO

--CREAR

CREATE PROCEDURE AGREGAR_MOTO @PLACA VARCHAR(6), @CILINDRAGE INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM VEHICULO WHERE PLACA = @PLACA) --SI NO EXISTE EL VEHICULO ENTONCES MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			ROLLBACK TRANSACTION
			PRINT 'NO EXISTE UNA MOTO CON ESTA PLACA'			
		END
	ELSE
		IF EXISTS (SELECT * FROM MOTO WHERE PLACA = @PLACA) --SI EXISTE YA LA MOTO ENTONCES MUESTRA EL SIGUIENTE MENSAJE
			BEGIN
				ROLLBACK TRANSACTION
				PRINT 'YA EXISTE UNA MOTO CON ESA PLACA EN ESTE REGISTRO'
			END
		ELSE
			BEGIN
				INSERT INTO MOTO VALUES (@PLACA, @CILINDRAGE)
				PRINT 'MOTO AGREGADA CORRECTAMENTE'
				COMMIT TRANSACTION
			END
END TRY
BEGIN CATCH	
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
GO

--LEER
CREATE PROCEDURE LEER_MOTO @ID VARCHAR(6) AS
BEGIN TRY
IF EXISTS (SELECT * FROM MOTO WHERE PLACA = @ID)--VERIFICAR SI EXISTE EL ID INGRESADO Y SI EXISTE VA A MOSTRAR EL DATO ESPECIFICO
	SELECT * FROM MOTO WHERE PLACA = @ID
ELSE
	SELECT * FROM MOTO--SI NO EXISTE EL ID SE MOSTRARÁN TODOS LOS DATOS DE LA TABLA
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

-- ACTUALIZAR
CREATE PROCEDURE ACTUALIZAR_MOTO @ID VARCHAR(6), @CILINDRAGE INT AS --EN EL SIGUIENTE PROCEDIMIENTO SE ANALIZA SI LOS DATOS INGRESADOS POR EL USUARIO ESTÁN VACIOS
BEGIN TRANSACTION                                                   --SI INGRESA UN DATOS INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRY
	IF @ID = '' OR @CILINDRAGE = 0
	BEGIN
		PRINT 'DEBE INGRESAR UNA UNA PLACA Y CILINDRAGE PARA ACTUALIZAR'
		ROLLBACK TRANSACTION
	END	
	ELSE
	IF NOT EXISTS (SELECT * FROM MOTO WHERE PLACA = @ID)
		BEGIN
			PRINT 'NO EXISTE UNA MOTO CON ES PLACA'
			ROLLBACK TRANSACTION
		END
	ELSE
		BEGIN
			UPDATE MOTO SET CILINDRAJE = @CILINDRAGE WHERE PLACA = @ID
			PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
			COMMIT TRANSACTION
		END	
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--BORRAR

CREATE PROCEDURE BORRAR_MOTO @ID VARCHAR(6) AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM MOTO WHERE PLACA = @ID) --SI NO EXISTE LA PLACA DE LA MOTO ENTONCES SACA EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'LA PLACA NO EXISTE'
			ROLLBACK TRANSACTION
		END		
	ELSE
		BEGIN --DE LO CONTRARIO HACE EL SIGUIENTE BORRADO
			DELETE FROM MOTO WHERE PLACA = @ID
			DELETE FROM VEHICULO WHERE PLACA = @ID
			PRINT 'DATOS BORRADOS EXITOSAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--CRUD MENSAJERO

--CREAR

CREATE PROCEDURE AGREGAR_MENSAJERO @CEDULA INT, @NOMBRE VARCHAR(60), @PLACA_VEH VARCHAR(6) AS --EN ESTE PROCEDIMIENTO SE VERIFICA PRIMERO SI EXISTEN SUS CLAVES FORANEAS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM VEHICULO WHERE PLACA = @PLACA_VEH) --SI NO EXISTE EL VEHICULO MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			ROLLBACK TRANSACTION
			PRINT 'NO EXISTE UN VEHICULO CON ESTA PLACA'			
		END
	ELSE
		IF EXISTS (SELECT * FROM MENSAJERO WHERE CEDULA = @CEDULA) --SI YA EXISTE EL MENSAJERO MUESTRA EL SIGUIENTE MENSAJE
			BEGIN
				ROLLBACK TRANSACTION
				PRINT 'YA EXISTE UN MENSAJER CON ESE NUMERO DE CEDULA'
			END
		ELSE
			BEGIN
				INSERT INTO MENSAJERO VALUES (@CEDULA, @NOMBRE, @PLACA_VEH)
				PRINT 'MENSAJERO AGREGADO CORRECTAMENTE'
				COMMIT TRANSACTION
			END
END TRY
BEGIN CATCH	
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
GO

--LEER
CREATE PROCEDURE LEER_MENSAJERO @ID INT AS
BEGIN TRY
IF EXISTS (SELECT * FROM MENSAJERO WHERE CEDULA = @ID)--VERIFICAR SI EXISTE EL ID INGRESADO Y SI EXISTE VA A MOSTRAR EL DATO ESPECIFICO
	SELECT * FROM MENSAJERO WHERE CEDULA = @ID
ELSE
	SELECT * FROM MENSAJERO --SI NO EXISTE EL ID SE MOSTRARÁN TODOS LOS DATOS DE LA TABLA
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--ACTUALIZAR

CREATE PROCEDURE ACTUALIZAR_MENSAJERO @ID INT, @NOMBRE VARCHAR(60), @PLACA VARCHAR(6) AS --EN EL SIGUIENTE PROCEDIMIENTO SE ANALIZA SI LOS DATOS INGRESADOS POR EL USUARIO ESTÁN VACIOS
BEGIN TRANSACTION                                                                        --SI INGRESA UN DATOS INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRY
	IF @ID = 0 AND @NOMBRE = '' AND @PLACA = ''
		BEGIN
			PRINT 'DEBE INGRESAR ALGUNO DE LOS DATOS REQUERIDOS'
			ROLLBACK TRANSACTION
		END	
	ELSE
		IF @ID != 0 AND @NOMBRE = '' AND @PLACA = ''
			BEGIN
				PRINT 'DEBE INGRESAR ALGUNO DE LOS DATOS REQUERIDOS'
				ROLLBACK TRANSACTION
			END
		ELSE
		IF NOT EXISTS (SELECT * FROM MENSAJERO WHERE CEDULA = @ID)
			BEGIN
				PRINT 'NO EXISTE UN MENSAJERO CON ESA CEDULA'
				ROLLBACK TRANSACTION
			END
		ELSE		
			IF @NOMBRE != '' AND @PLACA = ''
				BEGIN
					UPDATE MENSAJERO SET NOMBRE = @NOMBRE WHERE CEDULA = @ID
					PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
					COMMIT TRANSACTION
				END
			ELSE
				IF @NOMBRE = '' AND @PLACA != ''
					BEGIN
						UPDATE MENSAJERO SET VEHICULO_PLACA = @PLACA WHERE CEDULA = @ID
						PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
						COMMIT TRANSACTION
					END
				ELSE
					BEGIN
						UPDATE MENSAJERO SET NOMBRE = @NOMBRE, VEHICULO_PLACA = @PLACA WHERE CEDULA = @ID
						PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
						COMMIT TRANSACTION
					END	
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--BORRAR

CREATE PROCEDURE BORRAR_MENSAJERO @ID INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM MENSAJERO WHERE CEDULA = @ID) --SI NO EXISTE EL MENSAJERO SE MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'NO EXISTE UN MENSAJERO CON ESA CEDULA'
			ROLLBACK TRANSACTION
		END		
	ELSE
		IF EXISTS (SELECT * FROM MENSAJERO M INNER JOIN MENSAJERO_AREA ME ON ME.CEDULA_MENSAJERO = M.CEDULA WHERE CEDULA = @ID) --SI EXISTEN DATOS RELACIONADOS CON MENSAJERO HACE EL BORRADO DE LOS DATOS QUE SE RELACIONAN
			BEGIN
				DELETE FROM MENSAJERO_AREA WHERE CEDULA_MENSAJERO = @ID
				DELETE FROM MENSAJERO WHERE CEDULA = @ID
				PRINT 'DATOS BORRADOS EXITOSAMENTE'
				COMMIT TRANSACTION
			END
		ELSE
		BEGIN --SI NO EXISTEN DATOS RELACIONADOS ENTONCES HACE EL BORRADO DEL DATO INDIVIDUAL
			DELETE FROM MENSAJERO WHERE CEDULA = @ID
			PRINT 'DATOS BORRADOS EXITOSAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--CRUD CLIENTE

--CREAR

CREATE PROCEDURE AGREGAR_CLIENTE @CEDULA INT, @NOMBRE VARCHAR(60), @DIRECCION VARCHAR(60), @TELEFONO VARCHAR(10) AS
BEGIN TRANSACTION
BEGIN TRY
	IF EXISTS(SELECT * FROM CLIENTE WHERE CEDULA = @CEDULA)--SE VERIFICA SI EXISTE LA CEDULA, EN CASO TAL SE MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			ROLLBACK TRANSACTION
			PRINT 'YA EXISTE UN CLIENTE CON ESE NÚMERO DE CEDULA'			
		END	
	ELSE
		BEGIN
			INSERT INTO CLIENTE VALUES (@CEDULA, @NOMBRE, @DIRECCION, @TELEFONO) --EN CASO CONTRARIO HACE LA ACTUALIZACION
			PRINT 'CLIENTE AGREGADO CORRECTAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH	
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
GO

--LEER

CREATE PROCEDURE LEER_CLIENTE @ID INT AS
BEGIN TRY
IF EXISTS (SELECT * FROM CLIENTE WHERE CEDULA = @ID) --VERIFICAR SI EXISTE EL ID INGRESADO Y SI EXISTE VA A MOSTRAR EL DATO ESPECIFICO
	SELECT * FROM CLIENTE WHERE CEDULA = @ID 
ELSE
	SELECT * FROM CLIENTE --SI NO EXISTE EL ID SE MOSTRARÁN TODOS LOS DATOS DE LA TABLA
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--ACTUALIZAR
CREATE PROCEDURE ACTUALIZAR_CLIENTE @ID INT, @NOMBRE VARCHAR(60), @DIRECCION VARCHAR(60), @TELEFONO VARCHAR(10) AS --EN EL SIGUIENTE PROCEDIMIENTO SE ANALIZA SI LOS DATOS INGRESADOS POR EL USUARIO ESTÁN VACIOS
BEGIN TRANSACTION                                                                                                  --SI INGRESA UN DATOS INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRY
	IF @ID = 0 AND @NOMBRE = '' AND @DIRECCION = '' AND @TELEFONO = ''
		BEGIN
			PRINT 'DEBE INGRESAR ALGUNO DE LOS DATOS REQUERIDOS'
			ROLLBACK TRANSACTION
		END	
	ELSE
		IF @ID != 0 AND @NOMBRE = '' AND @DIRECCION = '' AND @TELEFONO = ''
			BEGIN
				PRINT 'DEBE INGRESAR ALGUNO DE LOS DATOS REQUERIDOS'
				ROLLBACK TRANSACTION
			END
		ELSE
		IF NOT EXISTS (SELECT * FROM CLIENTE WHERE CEDULA = @ID)
			BEGIN
				PRINT 'NO EXISTE UN CLIENTE CON ESA CEDULA'
				ROLLBACK TRANSACTION
			END
		ELSE		
			IF @NOMBRE != '' AND @DIRECCION = '' AND @TELEFONO = ''
				BEGIN
					UPDATE CLIENTE SET NOMBRE = @NOMBRE WHERE CEDULA = @ID
					PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
					COMMIT TRANSACTION
				END
			ELSE
				IF @NOMBRE = '' AND @DIRECCION != '' AND @TELEFONO = ''
					BEGIN
						UPDATE CLIENTE SET DIRECCION = @DIRECCION WHERE CEDULA = @ID
						PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
						COMMIT TRANSACTION
					END
				ELSE
					IF @NOMBRE = '' AND @DIRECCION = '' AND @TELEFONO != ''
						BEGIN
							UPDATE CLIENTE SET TELEFONO = @TELEFONO WHERE CEDULA = @ID
							PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
							COMMIT TRANSACTION
						END
					ELSE
						BEGIN
							UPDATE CLIENTE SET NOMBRE = @NOMBRE, DIRECCION = @DIRECCION, TELEFONO = @TELEFONO WHERE CEDULA = @ID
							PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
							COMMIT TRANSACTION
						END	
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--BORRAR

CREATE PROCEDURE BORRAR_CLIENTE @ID INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM CLIENTE WHERE CEDULA = @ID) --SI NO EL CLIENTE ENTONCES VA A DAR EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'NO EXISTE UN CLIENTE CON ESA CEDULA'
			ROLLBACK TRANSACTION
		END		
	ELSE
		BEGIN
			DELETE FROM CLIENTE WHERE CEDULA = @ID --EN CASO CONTRARIO HACE EL BORRADO DEL CLIENTE
			PRINT 'DATOS BORRADOS EXITOSAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--CRUD DESTINATARIO

--CREAR

CREATE PROCEDURE AGREGAR_DESTINATARIO @CEDULA INT, @NOMBRE VARCHAR(60), @DIRECCION VARCHAR(60), @TELEFONO VARCHAR(10) AS
BEGIN TRANSACTION
BEGIN TRY
	IF EXISTS(SELECT * FROM DESTINATARIO WHERE CEDULA = @CEDULA)--VERIFICAR SI EXISTE EL DESTINATARIO, SI YA EXISTE MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			ROLLBACK TRANSACTION
			PRINT 'YA EXISTE UN CLIENTE CON ESE NÚMERO DE CEDULA'			
		END	
	ELSE
		BEGIN
			INSERT INTO DESTINATARIO VALUES (@CEDULA, @NOMBRE, @DIRECCION, @TELEFONO) --EN CASO CONTRARIO ISE HACE LA INSERCION
			PRINT 'CLIENTE AGREGADO CORRECTAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH	
	ROLLBACK TRANSACTION
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--LEER

CREATE PROCEDURE LEER_DESTINATARIO @ID INT AS
BEGIN TRY
IF EXISTS (SELECT * FROM DESTINATARIO WHERE CEDULA = @ID) --VERIFICAR SI EXISTE EL ID INGRESADO Y SI EXISTE VA A MOSTRAR EL DATO ESPECIFICO
	SELECT * FROM DESTINATARIO WHERE CEDULA = @ID
ELSE
	SELECT * FROM DESTINATARIO --SI NO EXISTE EL ID SE MOSTRARÁN TODOS LOS DATOS DE LA TABLA
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO


--ACTUALIZAR
CREATE PROCEDURE ACTUALIZAR_DESTINATARIO @ID INT, @NOMBRE VARCHAR(60), @DIRECCION VARCHAR(60), @TELEFONO VARCHAR(10) AS --EN EL SIGUIENTE PROCEDIMIENTO SE ANALIZA SI LOS DATOS INGRESADOS POR EL USUARIO ESTÁN VACIOS
BEGIN TRANSACTION                                                                                                       --SI INGRESA UN DATOS INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRY
	IF @ID = 0 AND @NOMBRE = '' AND @DIRECCION = '' AND @TELEFONO = ''
		BEGIN
			PRINT 'DEBE INGRESAR ALGUNO DE LOS DATOS REQUERIDOS'
			ROLLBACK TRANSACTION
		END	
	ELSE
		IF @ID != 0 AND @NOMBRE = '' AND @DIRECCION = '' AND @TELEFONO = ''
			BEGIN
				PRINT 'DEBE INGRESAR ALGUNO DE LOS DATOS REQUERIDOS'
				ROLLBACK TRANSACTION
			END
		ELSE
		IF NOT EXISTS (SELECT * FROM DESTINATARIO WHERE CEDULA = @ID)
			BEGIN
				PRINT 'NO EXISTE UN CLIENTE CON ESA CEDULA'
				ROLLBACK TRANSACTION
			END
		ELSE		
			IF @NOMBRE != '' AND @DIRECCION = '' AND @TELEFONO = ''
				BEGIN
					UPDATE DESTINATARIO SET NOMBRE = @NOMBRE WHERE CEDULA = @ID
					PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
					COMMIT TRANSACTION
				END
			ELSE
				IF @NOMBRE = '' AND @DIRECCION != '' AND @TELEFONO = ''
					BEGIN
						UPDATE DESTINATARIO SET DIRECCION = @DIRECCION WHERE CEDULA = @ID
						PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
						COMMIT TRANSACTION
					END
				ELSE
					IF @NOMBRE = '' AND @DIRECCION = '' AND @TELEFONO != ''
						BEGIN
							UPDATE DESTINATARIO SET TELEFONO = @TELEFONO WHERE CEDULA = @ID
							PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
							COMMIT TRANSACTION
						END
					ELSE
						BEGIN
							UPDATE DESTINATARIO SET NOMBRE = @NOMBRE, DIRECCION = @DIRECCION, TELEFONO = @TELEFONO WHERE CEDULA = @ID
							PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
							COMMIT TRANSACTION
						END	
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--BORRAR

CREATE PROCEDURE BORRAR_DESTINATARIO @ID INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM DESTINATARIO WHERE CEDULA = @ID)--VERIFICAR SI NO EXISTE EL DESTINATARIOS, EN CASO TAL MUESTRE EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'NO EXISTE UN CLIENTE CON ESA CEDULA'
			ROLLBACK TRANSACTION
		END		
	ELSE
		BEGIN 
			DELETE FROM DESTINATARIO WHERE CEDULA = @ID --EN CASO CONTRARIO BORRA EL CLIENTE
			PRINT 'DATOS BORRADOS EXITOSAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--CRUD PAQUETE

--CREAR

CREATE PROCEDURE AGREGAR_PAQUETE @DIRECCION VARCHAR(60), @COSTO FLOAT, @ID_TIPO INT, @CEDULA_MENS INT, @CEDULA_CLIENTE INT, @CEDULA_DESTINATARIO INT AS --EN EL SIGUIENTE PROCEDIMIENTO SE VERIFICAN SI LAS CLAVES FORANEAS EXISTEN EN LA BASE DE DATOS
BEGIN TRANSACTION
BEGIN TRY
		IF NOT EXISTS (SELECT * FROM CLIENTE WHERE CEDULA = @CEDULA_CLIENTE)
			BEGIN
				ROLLBACK TRANSACTION
				PRINT 'LA CEDULA DEL CLIENTE NO EXISTE'
			END
		ELSE
			IF NOT EXISTS (SELECT * FROM MENSAJERO WHERE CEDULA = @CEDULA_MENS)
					BEGIN
						ROLLBACK TRANSACTION
						PRINT 'LA CEDULA DEL MENSAJERO NO EXISTE'
					END
			ELSE
				IF NOT EXISTS (SELECT * FROM DESTINATARIO WHERE CEDULA = @CEDULA_DESTINATARIO)
					BEGIN
						ROLLBACK TRANSACTION
						PRINT 'LA CEDULA DEL DESTINATARIO NO EXISTE'
					END
				ELSE
					IF EXISTS (SELECT * FROM MENSAJERO WHERE CEDULA = @CEDULA_MENS) --EN CASO DE QUE PASE TODAS LAS VALIDACIONES SE HACE LA INSERCION DE LOS DATOS
						BEGIN
							DECLARE @ID_PAQ INT
							SET @ID_PAQ = (SELECT TOP 1 ID_PAQ_MENSAJERO + 1 FROM PAQUETE WHERE CEDULA_MENSAJERO = @CEDULA_MENS ORDER BY ID_PAQ_MENSAJERO DESC)--EN ESTA VARIABLE SE ACTUALIZA EL ID PAQUETE Y EN EL MOMENTO DE ACTUALIZAR SE ACTUALIZA CON ESTA VARIABLE 
							INSERT INTO PAQUETE VALUES (@DIRECCION, @COSTO, @ID_TIPO, @ID_PAQ, @CEDULA_MENS, @CEDULA_CLIENTE, @CEDULA_DESTINATARIO)
							PRINT 'PAQUETE AGREGADO CORRECTAMENTE'
							COMMIT TRANSACTION				
						END				
END TRY
BEGIN CATCH	
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
GO

--LEER

CREATE PROCEDURE LEER_PAQUETE @ID INT AS
BEGIN TRY
IF EXISTS (SELECT * FROM PAQUETE WHERE ID_PAQUETE = @ID)--VERIFICAR SI EXISTE EL ID INGRESADO Y SI EXISTE VA A MOSTRAR EL DATO ESPECIFICO
	SELECT * FROM PAQUETE WHERE ID_PAQUETE = @ID
ELSE
	SELECT * FROM PAQUETE --SI NO EXISTE EL ID SE MOSTRARÁN TODOS LOS DATOS DE LA TABLA
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--ACTUALIZAR

CREATE PROCEDURE ACTUALIZAR_PAQUETE @ID INT, @DIRECCION VARCHAR(60), @COSTO FLOAT, @ID_TIPO INT, @CEDULA_MENS INT, @CEDULA_CLIENTE INT, @CEDULA_DESTINATARIO INT AS --EN EL SIGUIENTE PROCEDIMIENTO SE ANALIZA SI LOS DATOS INGRESADOS POR EL USUARIO ESTÁN VACIOS
BEGIN TRANSACTION                                                                                                                                                   --SI INGRESA UN DATOS INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRY
	IF @ID = 0 AND @DIRECCION = '' AND @COSTO = 0 AND @ID_TIPO = 0 AND @CEDULA_MENS = 0 AND @CEDULA_CLIENTE = 0 AND @CEDULA_DESTINATARIO = 0
		BEGIN
			PRINT 'DEBE INGRESAR ALGUNO DE LOS DATOS REQUERIDOS'
			ROLLBACK TRANSACTION
		END	
	ELSE
		IF @ID != 0 AND @DIRECCION = '' AND @COSTO = 0 AND @ID_TIPO = 0 AND @CEDULA_MENS = 0 AND @CEDULA_CLIENTE = 0 AND @CEDULA_DESTINATARIO = 0
			BEGIN
				PRINT 'DEBE INGRESAR ALGUNO DE LOS DATOS REQUERIDOS'
				ROLLBACK TRANSACTION
			END
		ELSE
		IF NOT EXISTS (SELECT * FROM PAQUETE WHERE ID_PAQUETE = @ID)
			BEGIN
				PRINT 'NO EXISTE UN PAQUETE CON ES ID'
				ROLLBACK TRANSACTION
			END
		ELSE		
			IF @DIRECCION != '' AND @COSTO = 0 AND @ID_TIPO = 0 AND @CEDULA_MENS = 0 AND @CEDULA_CLIENTE = 0 AND @CEDULA_DESTINATARIO = 0
				BEGIN
					UPDATE PAQUETE SET DIRECCION = @DIRECCION WHERE ID_PAQUETE = @ID
					PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
					COMMIT TRANSACTION
				END
			ELSE
				IF @DIRECCION = '' AND @COSTO != 0 AND @ID_TIPO = 0 AND @CEDULA_MENS = 0 AND @CEDULA_CLIENTE = 0 AND @CEDULA_DESTINATARIO = 0
					BEGIN
						UPDATE PAQUETE SET COST_ENVIO = @COSTO WHERE ID_PAQUETE = @ID
						PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
						COMMIT TRANSACTION
					END
				ELSE
					IF @DIRECCION = '' AND @COSTO = 0 AND @ID_TIPO != 0 AND @CEDULA_MENS = 0 AND @CEDULA_CLIENTE = 0 AND @CEDULA_DESTINATARIO = 0
						BEGIN
							UPDATE PAQUETE SET ID_TIPO = @ID_TIPO WHERE ID_PAQUETE = @ID
							PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
							COMMIT TRANSACTION
						END
					ELSE
						IF @DIRECCION = '' AND @COSTO = 0 AND @ID_TIPO = 0 AND @CEDULA_MENS != 0 AND @CEDULA_CLIENTE = 0 AND @CEDULA_DESTINATARIO = 0
							BEGIN
								IF NOT EXISTS (SELECT * FROM MENSAJERO WHERE CEDULA = @CEDULA_MENS)
								BEGIN
									PRINT 'NO EXISTE UN MENSAJERO CON ESA CEDULA VERIFIQUE NUEVAMENTE'
									ROLLBACK TRANSACTION
								END
								ELSE 
									BEGIN 
										DECLARE @ID_PAQ INT
										SET @ID_PAQ = (SELECT TOP 1 ID_PAQ_MENSAJERO + 1 FROM PAQUETE WHERE CEDULA_MENSAJERO = @CEDULA_MENS ORDER BY ID_PAQ_MENSAJERO DESC)
										UPDATE PAQUETE SET CEDULA_MENSAJERO = @CEDULA_MENS, ID_PAQ_MENSAJERO = @ID_PAQ WHERE ID_PAQUETE = @ID
										DECLARE @ID_PAQ_MENSAJERO INT--EN LAS SIGUIENTES LINEAS DE CODIGO SE ACTUALIZAN TODOS LOS ID PAQUETE DE UN MENSAJERO PARA QUE QUEDEN DE FORMA ORDENADA Y SE UTILIZA EL CURSOR PARA QUE ACTUALICE TODOS LOS ID
										DECLARE	@ID_PAQUETE INT
										DECLARE CUR_PAQ CURSOR FOR
										SELECT ROW_NUMBER() OVER (ORDER BY ID_PAQ_MENSAJERO ASC), ID_PAQUETE
										FROM PAQUETE where CEDULA_MENSAJERO = @CEDULA_MENS
										ORDER BY ID_PAQ_MENSAJERO ASC;

										OPEN CUR_PAQ;

										FETCH CUR_PAQ INTO @ID_PAQ_MENSAJERO, @ID_PAQUETE;
										WHILE @@FETCH_STATUS = 0
										BEGIN
											UPDATE PAQUETE
											SET ID_PAQ_MENSAJERO = @ID_PAQ_MENSAJERO
											WHERE CEDULA_MENSAJERO = @CEDULA_MENS and ID_PAQUETE = @ID_PAQUETE;
											FETCH CUR_PAQ INTO @ID_PAQ_MENSAJERO, @ID_PAQUETE;
										END;

										CLOSE CUR_PAQ;
										DEALLOCATE CUR_PAQ;
										PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
										COMMIT TRANSACTION
									END
							END
						ELSE
							IF @DIRECCION = '' AND @COSTO = 0 AND @ID_TIPO = 0 AND @CEDULA_MENS = 0 AND @CEDULA_CLIENTE != 0 AND @CEDULA_DESTINATARIO = 0
							BEGIN
								IF NOT EXISTS (SELECT * FROM CLIENTE WHERE CEDULA = @CEDULA_CLIENTE)
									BEGIN
										PRINT 'EL CLIENTE NO EXISTE VERIFIQUE NUEVAMENTE'
										ROLLBACK TRANSACTION
									END
								UPDATE PAQUETE SET CEDULA_CLIENTE = @CEDULA_CLIENTE WHERE ID_PAQUETE = @ID
								PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
								COMMIT TRANSACTION
							END
						ELSE
							IF @DIRECCION = '' AND @COSTO = 0 AND @ID_TIPO = 0 AND @CEDULA_MENS = 0 AND @CEDULA_CLIENTE = 0 AND @CEDULA_DESTINATARIO != 0
								BEGIN
									IF NOT EXISTS (SELECT * FROM DESTINATARIO WHERE CEDULA = @CEDULA_DESTINATARIO)
										BEGIN
											PRINT 'EL DESTINATARIO NO EXISTE VERIFIQUE NUEVAMENTE'
											ROLLBACK TRANSACTION
										END
									UPDATE PAQUETE SET CEDULA_DESTINATARIO = @CEDULA_DESTINATARIO WHERE ID_PAQUETE = @ID
									PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
									COMMIT TRANSACTION
								END
							ELSE
								BEGIN
									IF NOT EXISTS (SELECT * FROM CLIENTE WHERE CEDULA = @CEDULA_CLIENTE)
										BEGIN 
											ROLLBACK TRANSACTION
											PRINT 'EL CLIENTE NO EXISTE'
										END
									ELSE
										IF NOT EXISTS (SELECT * FROM DESTINATARIO WHERE CEDULA = @CEDULA_DESTINATARIO)
											BEGIN
												ROLLBACK TRANSACTION
												PRINT 'EL DETINATARIO NO EXISTE VERIFIQUE NUEVAMENTE'
											END
										ELSE
											IF NOT EXISTS (SELECT * FROM MENSAJERO WHERE CEDULA = @CEDULA_MENS)
												BEGIN
													ROLLBACK TRANSACTION
													PRINT 'EL MENSAJERO NO EXISTE, VERIFIQUE NUEVAMENTE'
												END
											ELSE
												BEGIN
													DECLARE @ID_PAQ1 INT
													SET @ID_PAQ1 = (SELECT TOP 1 ID_PAQ_MENSAJERO + 1 FROM PAQUETE WHERE CEDULA_MENSAJERO = @CEDULA_MENS ORDER BY ID_PAQ_MENSAJERO DESC)
													UPDATE PAQUETE SET DIRECCION = @DIRECCION, COST_ENVIO = @COSTO, ID_TIPO = @ID_TIPO, ID_PAQ_MENSAJERO = @ID_PAQ1, CEDULA_MENSAJERO = @CEDULA_MENS, CEDULA_CLIENTE = @CEDULA_CLIENTE, CEDULA_DESTINATARIO = @CEDULA_DESTINATARIO WHERE ID_PAQUETE = @ID

													DECLARE @ID_PAQ_MENSAJERO1 INT --EN LAS SIGUIENTES LINEAS DE CODIGO SE ACTUALIZAN TODOS LOS ID PAQUETE DE UN MENSAJERO PARA QUE QUEDEN DE FORMA ORDENADA Y SE UTILIZA EL CURSOR PARA QUE ACTUALICE TODOS LOS ID
													DECLARE	@ID_PAQUETE1 INT
													DECLARE CUR_PAQ CURSOR FOR
													SELECT ROW_NUMBER() OVER (ORDER BY ID_PAQ_MENSAJERO ASC), ID_PAQUETE
													FROM PAQUETE where CEDULA_MENSAJERO = @CEDULA_MENS
													ORDER BY ID_PAQ_MENSAJERO ASC;

													OPEN CUR_PAQ;

													FETCH CUR_PAQ INTO @ID_PAQ_MENSAJERO1, @ID_PAQUETE1;
													WHILE @@FETCH_STATUS = 0
													BEGIN

														UPDATE PAQUETE
														SET ID_PAQ_MENSAJERO = @ID_PAQ_MENSAJERO
														WHERE CEDULA_MENSAJERO = @CEDULA_MENS and ID_PAQUETE = @ID_PAQUETE1;
														FETCH CUR_PAQ INTO @ID_PAQ_MENSAJERO1, @ID_PAQUETE1;
													END;

													CLOSE CUR_PAQ;
													DEALLOCATE CUR_PAQ;
													PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
													COMMIT TRANSACTION
												END
								END	
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--ELIMINAR
CREATE PROCEDURE BORRAR_PAQUETE @ID INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM PAQUETE WHERE ID_PAQUETE = @ID)--SE VERIFICA SI NO EXISTE EL PAQUETE, EN CASO TAL SE MUESTRA EL MENSAJE Y SE FINALIZA
		BEGIN
			PRINT 'NO EXISTE UN CLIENTE CON ESA CEDULA'
			ROLLBACK TRANSACTION
		END		
	ELSE
		BEGIN --EN CASO CONTRARIO SE HACE EL BORRADO DEL DATO
			DECLARE @CEDULA INT 
			SET @CEDULA = (SELECT CEDULA_MENSAJERO FROM PAQUETE WHERE ID_PAQUETE = @ID)
			DELETE FROM PAQUETE WHERE ID_PAQUETE = @ID

			DECLARE @ID_PAQ_MENSAJERO INT--EN LAS SIGUIENTES LINEAS DE CODIGO SE ACTUALIZAN TODOS LOS ID PAQUETE DE UN MENSAJERO PARA QUE QUEDEN DE FORMA ORDENADA
			DECLARE	@ID_PAQUETE INT      --Y SE UTILIZA EL CURSOR PARA QUE ACTUALICE TODOS LOS ID
			DECLARE CUR_PAQ CURSOR FOR
			SELECT ROW_NUMBER() OVER (ORDER BY ID_PAQ_MENSAJERO ASC), ID_PAQUETE
			FROM PAQUETE where CEDULA_MENSAJERO = @CEDULA
			ORDER BY ID_PAQ_MENSAJERO ASC;

			OPEN CUR_PAQ;

			FETCH CUR_PAQ INTO @ID_PAQ_MENSAJERO, @ID_PAQUETE;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE PAQUETE
				SET ID_PAQ_MENSAJERO = @ID_PAQ_MENSAJERO
				WHERE CEDULA_MENSAJERO = @CEDULA AND ID_PAQUETE = @ID_PAQUETE;
				FETCH CUR_PAQ INTO @ID_PAQ_MENSAJERO, @ID_PAQUETE;
			END;

			CLOSE CUR_PAQ;
			DEALLOCATE CUR_PAQ;
			PRINT 'DATOS BORRADOS EXITOSAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--CRUD MENSAJERO_AREA

--CREAR

CREATE PROCEDURE AGREGAR_MENSAJERO_AREA @CEDULA INT, @ID_AREA INT, @KILOMETROS INT, @FECHA DATE AS --
BEGIN TRANSACTION
BEGIN TRY
	IF EXISTS(SELECT * FROM MENSAJERO_AREA WHERE CEDULA_MENSAJERO = @CEDULA AND ID_AREA = @ID_AREA AND FECHA = @FECHA)--SE VERIFICA SI EXISTE EL REGISTR, EN CASO TAL SE MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			ROLLBACK TRANSACTION
			PRINT 'YA EXISTE UN CLIENTE CON ESE NÚMERO DE CEDULA'			
		END	
	ELSE
		BEGIN --EN CASO CONTRARIO SE INSERTA EL REGISTRO 
			INSERT INTO MENSAJERO_AREA VALUES (@CEDULA, @ID_AREA, @KILOMETROS, @FECHA)
			PRINT 'CLIENTE AGREGADO CORRECTAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH	
	PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
GO

--LEER

CREATE PROCEDURE LEER_MENSAJERO_AREA @ID INT AS
BEGIN TRY
IF EXISTS (SELECT * FROM MENSAJERO_AREA WHERE ID_MENS_AREA = @ID) --SE VERIFICA SI EXISTE EL REGISTRO, SI EXISTE SE MUESTRA LOS DATOS DE ESTE MISMO REGISTRO
	SELECT * FROM MENSAJERO_AREA WHERE ID_MENS_AREA = @ID
ELSE
	SELECT * FROM MENSAJERO_AREA --EN CASO DE QUE NO EXISTA EL ID INGRESADO SE MOSTRARA TODA LA TABLA DE REGISTROS
END TRY
BEGIN CATCH
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--ACTUALIZAR

CREATE PROCEDURE ACTUALIZAR_MENSAJERO_AREA @ID INT, @CEDULA INT, @ID_AREA INT, @KILOMETROS INT, @FECHA DATE AS --SI INGRESA UN DATOS INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRANSACTION                                                                                              --SI INGRESA UN DATOS INDIVIDUAL ACTUALIZARÁ EL DATO INDIVIDUAL, SI LOS INGRESA TODOS LOS ACTUALIZARÁ TODOS
BEGIN TRY
	IF @ID = 0 AND @CEDULA = 0 AND @ID_AREA = 0 AND @KILOMETROS = 0 AND @FECHA = ''
		BEGIN
			ROLLBACK TRANSACTION
			PRINT 'DEBE INGRESAR ALGUNO DE LOS DATOS REQUERIDOS'			
		END	
	ELSE
		IF @ID != 0 AND @CEDULA = 0 AND @ID_AREA = 0 AND @KILOMETROS = 0 AND @FECHA = ''
			BEGIN
				PRINT 'DEBE INGRESAR ALGUNO DE LOS DATOS REQUERIDOS'
				ROLLBACK TRANSACTION
			END
		ELSE
		IF NOT EXISTS (SELECT * FROM MENSAJERO WHERE CEDULA = @CEDULA)
			BEGIN
				ROLLBACK TRAN
				PRINT 'NO EXISTE UN MENSAJERO CON ESA CEDULA'
			END
		ELSE
			IF NOT EXISTS(SELECT * FROM AREA WHERE ID_AREA = @ID_AREA)
				BEGIN
					ROLLBACK TRAN
					PRINT 'NO EXISTE UN AREA CON ESE ID'
				END
			ELSE
				IF NOT EXISTS (SELECT * FROM MENSAJERO_AREA WHERE ID_MENS_AREA = @ID)
					BEGIN
						PRINT 'NO EXISTE NINGUN REGISTRO CON ES ID'
						ROLLBACK TRANSACTION
					END
				ELSE		
					IF @CEDULA != 0 AND @ID_AREA = 0 AND @KILOMETROS = 0 AND @FECHA = ''
						BEGIN 
							UPDATE MENSAJERO_AREA SET CEDULA_MENSAJERO = @CEDULA WHERE ID_MENS_AREA = @ID
							PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
							COMMIT TRANSACTION
						END
					ELSE
						IF @CEDULA = 0 AND @ID_AREA != 0 AND @KILOMETROS = 0 AND @FECHA = ''
							BEGIN
								UPDATE MENSAJERO_AREA SET ID_AREA = @ID_AREA WHERE ID_MENS_AREA = @ID
								PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
								COMMIT TRANSACTION
							END
						ELSE
							IF @CEDULA = 0 AND @ID_AREA = 0 AND @KILOMETROS != 0 AND @FECHA = ''
								BEGIN
									UPDATE MENSAJERO_AREA SET KILOMETRO = @KILOMETROS WHERE ID_MENS_AREA = @ID
									PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
									COMMIT TRANSACTION
								END
							ELSE
								IF @CEDULA = 0 AND @ID_AREA = 0 AND @KILOMETROS = 0 AND @FECHA != ''
									BEGIN
										UPDATE MENSAJERO_AREA SET FECHA = @FECHA WHERE ID_MENS_AREA = @ID
										PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
										COMMIT TRANSACTION
									END
								ELSE
									BEGIN
										UPDATE MENSAJERO_AREA SET CEDULA_MENSAJERO = @CEDULA, ID_AREA = @ID_AREA, KILOMETRO = @KILOMETROS, FECHA = @FECHA WHERE ID_MENS_AREA = @ID
										PRINT 'DATOS ACTUALIZADOS CORRECTAMENTE'
										COMMIT TRANSACTION
									END	
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--BORRAR

CREATE PROCEDURE BORRAR_MENSAJERO_AREA @ID INT AS
BEGIN TRANSACTION
BEGIN TRY
	IF NOT EXISTS(SELECT * FROM MENSAJERO_AREA WHERE ID_MENS_AREA = @ID)--SE VERIFICA SI NO EXISTE EL REGISTRO, EN CASO TAL SE MUESTRA EL SIGUIENTE MENSAJE
		BEGIN
			PRINT 'NO EXISTE NINGUN REGISTRO CON ESE ID'
			ROLLBACK TRANSACTION
		END		
	ELSE
		BEGIN
			DELETE FROM MENSAJERO_AREA WHERE ID_MENS_AREA = @ID--EN CASO CONTRARIO SE HACE EL BORRADO
			PRINT 'DATOS BORRADOS EXITOSAMENTE'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
    PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH
GO

--ULTIMO PUNTO

--EN ESTA ULTIMA SECCION SE AGREGARAN LAS COLUMNAS SUELDO Y TIPO_CONDUCTOR A MENSAJERO, PARA QUE LE ASIGNE UN SUELDO A CADA MENSAJER Y EN BASE A ESTE SE INGRESE SI CONDUCEMOTO, CARRO O
--POR AHORA NO SE LE HA ASIGNADO NINGUN VEHICULO

ALTER TABLE MENSAJERO ADD SUELDO FLOAT --SE AÑADE LA COLUMNA SUELDO A LA TABLA MENSAJERO
ALTER TABLE MENSAJERO ADD TIPO_CONDUCTOR VARCHAR(100) --SE AÑADE LA COLUMNA TIPO_CONDUCTOR A LA TABLA MENSAJERO

CREATE FUNCTION NOMINA (@CEDULA INT) RETURNS FLOAT AS --EN ESTA FUNCION SE ASIGNA UN SUELDO BASE Y CUANTO ES EL DINERO EXTRA QUE SE DA, SEA POR MANEJAR CARRO O MOTO
BEGIN
	DECLARE @SALARIO MONEY
	DECLARE @EXTRA_CARRO MONEY
	DECLARE @EXTRA_MOTO MONEY
	DECLARE @BASE MONEY
	SET @BASE = 1300000
	SET @EXTRA_CARRO = 200000
	SET @EXTRA_MOTO = 100000

	IF EXISTS (SELECT * FROM MENSAJERO M INNER JOIN VEHICULO V ON V.PLACA = M.VEHICULO_PLACA INNER JOIN CARRO C ON C.PLACA = V.PLACA WHERE M.CEDULA = @CEDULA) --SE VERIFICA SI LA PLACA ASIGNADA AL MENSAJERO
		BEGIN                                                                                                                                                  --ES CARRO
			SET @SALARIO = @BASE + @EXTRA_CARRO --AL SALARIO SE LE AGREGA EL EXTRA QUE LE CORRESPONDE A LOS CONDUCTORES DE CARRO
		END
	ELSE
		IF EXISTS (SELECT * FROM MENSAJERO M INNER JOIN VEHICULO V ON V.PLACA = M.VEHICULO_PLACA INNER JOIN MOTO MO ON MO.PLACA = V.PLACA WHERE M.CEDULA = @CEDULA)--SE VERIFICA SI LA PLACA ASIGNADA AL MENSAJERO ES DE MOTO
			BEGIN
				SET @SALARIO = @BASE + @EXTRA_MOTO --EN CASO TAL SE LE SUMA AL SALARIOEL EXTRA CORRESPONDIENTE A LOS CONDUCTORES DE MOTO
			END
		ELSE
			BEGIN
				SET @SALARIO = @BASE --EN CASO DE QUE NO SE LE HAYA ASIGNADO NINGUN VEHICULO AUN CONSERVARÁ SU SALARIO BASE
			END
	RETURN @SALARIO
END

CREATE PROCEDURE PAGO_NOMINA AS --EN ESTE PROCEDIMIENTO SE HACE INSERCION DE LOS SUELDOS POR MEDIO DE UN CURSOR QUE VA A RECORRER MENSAJERO POR MENSAJERO
DECLARE @CEDULA INT
DECLARE @PAGA MONEY
BEGIN TRANSACTION
BEGIN TRY
DECLARE NOMINA CURSOR FOR SELECT CEDULA FROM MENSAJERO
  OPEN NOMINA
  FETCH NOMINA INTO @CEDULA
  WHILE (@@FETCH_STATUS = 0)
  BEGIN
	SET @PAGA = dbo.NOMINA(@CEDULA) --EN ESTA VARIABLE SE ASIGNA LA FUNCIÓN YA EXPLCADA MÁS ARRIBA
	UPDATE MENSAJERO
	SET  SUELDO = @PAGA --SE INGRESA EL SUELDO CORRESPONDIENTE A CADA TRABAJADOR
	WHERE CEDULA =  @CEDULA

	FETCH NOMINA INTO @CEDULA
  END
  CLOSE NOMINA
  DEALLOCATE NOMINA
  COMMIT TRANSACTION 
END TRY
BEGIN CATCH
  ROLLBACK TRANSACTION
  PRINT 'OCURRIO UN ERROR: ' + ERROR_MESSAGE()
END CATCH

CREATE TRIGGER TIPO_CONDUCTOR on MENSAJERO AFTER UPDATE as --EN ESTE TRIGGER SE ANALIZA QUE SUELDO RECIBE CADA MENSAJERO Y EN CASO EN BASE A ESTO MUESTRA SI MANEJA CARRO, MOTO O NO CONDUCE NADA AUN
	DECLARE @TIPO_CONDUCTOR VARCHAR(100)
	DECLARE @SUELDO MONEY
	DECLARE @CEDULA INT
	IF UPDATE(SUELDO)
		BEGIN
			SELECT @SUELDO = INSERTED.SUELDO FROM INSERTED
			IF @SUELDO = 1400000
				BEGIN
					SET @TIPO_CONDUCTOR = 'CONDUCE MOTO'
					SELECT @CEDULA = INSERTED.CEDULA FROM INSERTED
					UPDATE MENSAJERO SET TIPO_CONDUCTOR = @TIPO_CONDUCTOR WHERE CEDULA = @CEDULA
				END
			ELSE
				IF @SUELDO = 1500000
					BEGIN
						SET @TIPO_CONDUCTOR = 'CONDUCE CARRO'
						SELECT @CEDULA = INSERTED.CEDULA FROM INSERTED
						UPDATE MENSAJERO SET TIPO_CONDUCTOR = @TIPO_CONDUCTOR WHERE CEDULA = @CEDULA
					END
				ELSE
					BEGIN
						SET @TIPO_CONDUCTOR = 'NO SE LE HA ASIGNADO VEHICULO'
						SELECT @CEDULA = INSERTED.CEDULA FROM INSERTED
						UPDATE MENSAJERO SET TIPO_CONDUCTOR = @TIPO_CONDUCTOR WHERE CEDULA = @CEDULA
					END
		END

CREATE VIEW MENSAJERO_PAQUETE AS
SELECT M.CEDULA, M.NOMBRE, IIF(M.VEHICULO_PLACA = C.PLACA, 'CARRO', 'MOTO') [TIPO DE VEHICULO], COUNT(P.ID_PAQUETE) 'CANTIDAD DE PAQUETES', P.ID_TIPO FROM MENSAJERO M 
INNER JOIN VEHICULO V ON V.PLACA = M.VEHICULO_PLACA 
FULL JOIN MOTO MO ON MO.PLACA = V.PLACA 
FULL JOIN CARRO C ON C.PLACA = V.PLACA
INNER JOIN PAQUETE P ON P.CEDULA_MENSAJERO = M.CEDULA
GROUP BY M.CEDULA, M.NOMBRE, P.ID_PAQUETE, IIF(M.VEHICULO_PLACA = C.PLACA, 'CARRO', 'MOTO'), P.ID_TIPO